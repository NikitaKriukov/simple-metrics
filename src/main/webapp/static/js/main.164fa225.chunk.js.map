{"version":3,"sources":["serviceWorker.js","components/cpuIndicator.jsx","components/memIndicator.jsx","components/container.jsx","index.js"],"names":["Boolean","window","location","hostname","match","CpuIndicator","state","cpuLoadValue","serverAccessError","digitsStyle","width","fontSize","fontWaight","react_default","a","createElement","style","this","className","getBadgeClasses","getBadgeValue","_this2","setInterval","fetch","then","response","json","data","setState","systemCpuLoad","catch","err","console","error","classes","Component","MemIndicator","maxMemory","allocatedMemory","freeMemory","getFreeMemValue","fm","am","isNaN","result","Math","round","IndicatorsContainer","cpuIndicator","memIndicator","ReactDOM","render","container","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGC+CSC,6MA7DbC,MAAQ,CACNC,aAAc,EACdC,mBAAmB,KAGrBC,YAAc,CACZC,MAAO,IACPC,SAAU,GACVC,WAAY,gFAIZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,MAAOC,KAAKR,YAAaS,UAAWD,KAAKE,mBAC7CN,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAKE,KAAKG,+DAME,IAAAC,EAAAJ,KAyBlBK,YArBgB,WAEdC,MAJO,cAKJC,KAAK,SAASC,GACb,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJN,EAAKO,SAAS,CACZrB,aAAcoB,EAAKE,cACnBrB,mBAAmB,MAGtBsB,MAAM,SAAAC,GACLC,QAAQC,MAAMF,GACdV,EAAKO,SAAS,CACZrB,aAAc,EACdC,mBAAmB,OAnBH,+CA4BxB,IAAI0B,EAAU,mBAEd,OADAA,GAAWjB,KAAKX,MAAMC,aAAe,GAAK,UAAY,kDAKtD,OAAOU,KAAKX,MAAME,kBAAoB,MAAQS,KAAKX,MAAMC,oBA1DlC4B,aCoFZC,6MAnFb9B,MAAQ,CACN+B,UAAW,EACXC,gBAAiB,EACjBC,WAAY,EACZ/B,mBAAmB,KAGrBC,YAAc,CACZC,MAAO,IACPC,SAAU,GACVC,WAAY,gFAIZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,MAAOC,KAAKR,YAAaS,UAAWD,KAAKE,mBAC7CN,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAKE,KAAKG,+DAME,IAAAC,EAAAJ,KA8BlBK,YAzBgB,WAEdC,MALO,iBAMJC,KAAK,SAASC,GACb,OAAOA,EAASC,SAEjBF,KAAK,SAAAG,GACJN,EAAKO,SAAS,CACZS,UAAWV,EAAKU,UAChBC,gBAAiBX,EAAKW,gBACtBC,WAAYZ,EAAKY,WACjB/B,mBAAmB,MAGtBsB,MAAM,SAAAC,GACLC,QAAQC,MAAMF,GACdV,EAAKO,SAAS,CACZS,UAAW,EACXC,gBAAiB,EACjBC,WAAY,EACZ/B,mBAAmB,OAxBH,+CAiCxB,IAAI0B,EAAU,mBAEd,OADAA,GAAWjB,KAAKuB,kBAAoB,GAAK,UAAY,oDAKrD,IAAIC,EAAKxB,KAAKX,MAAMiC,WAChBG,EAAKzB,KAAKX,MAAMgC,gBAMpB,GAAW,IAAPI,GAAYC,MAAMD,GAAK,MAAO,KAClC,IAAIE,EAAU,IAAMH,EAAMC,EAG1B,OAFIE,EAAS,MAAKA,EAAS,MACvBA,EAAS,GAAKD,MAAMC,MAASA,EAAS,GACnCC,KAAKC,MAAMF,2CAIlB,OAAO3B,KAAKX,MAAME,kBAAoB,MAAQS,KAAKuB,yBAhF5BL,aCYZY,mLATX,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,cAL0Bd,aCIlCe,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAAyBC,SAASC,eAAe,SJyH3D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.164fa225.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\r\n\r\n// System CPU load indicator\r\nclass CpuIndicator extends Component {\r\n  state = {\r\n    cpuLoadValue: 0,\r\n    serverAccessError: false\r\n  };\r\n\r\n  digitsStyle = {\r\n    width: 160,\r\n    fontSize: 10,\r\n    fontWaight: \"bold\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={this.digitsStyle} className={this.getBadgeClasses()}>\r\n          <h6>System CPU load %</h6>\r\n          <h1>{this.getBadgeValue()}</h1>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const requestInterval = 1000;\r\n    const url = `/usage/cpu`;\r\n    //    const url = `http://localhost:8080/usage/cpu`;\r\n    const getTime = () => {\r\n      //      fetch(url, { mode: \"no-cors\" })\r\n      fetch(url)\r\n        .then(function(response) {\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          this.setState({\r\n            cpuLoadValue: data.systemCpuLoad,\r\n            serverAccessError: false\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          this.setState({\r\n            cpuLoadValue: 0,\r\n            serverAccessError: true\r\n          });\r\n        });\r\n    };\r\n\r\n    setInterval(getTime, requestInterval);\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.state.cpuLoadValue > 70 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  getBadgeValue() {\r\n    return this.state.serverAccessError ? \"N/A\" : this.state.cpuLoadValue;\r\n  }\r\n}\r\n\r\nexport default CpuIndicator;\r\n","import React, { Component } from \"react\";\r\n\r\n// Java VM Memory indicator\r\nclass MemIndicator extends Component {\r\n  state = {\r\n    maxMemory: 0,\r\n    allocatedMemory: 0,\r\n    freeMemory: 0,\r\n    serverAccessError: false\r\n  };\r\n\r\n  digitsStyle = {\r\n    width: 160,\r\n    fontSize: 10,\r\n    fontWaight: \"bold\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span style={this.digitsStyle} className={this.getBadgeClasses()}>\r\n          <h6>VM Free Memory %</h6>\r\n          <h1>{this.getBadgeValue()}</h1>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    const requestInterval = 5000;\r\n    const url = `/usage/memory`;\r\n    // const url = `http://localhost:8080/usage/memory`;\r\n\r\n    const getTime = () => {\r\n      //      fetch(url, { mode: \"no-cors\" })\r\n      fetch(url)\r\n        .then(function(response) {\r\n          return response.json();\r\n        })\r\n        .then(data => {\r\n          this.setState({\r\n            maxMemory: data.maxMemory,\r\n            allocatedMemory: data.allocatedMemory,\r\n            freeMemory: data.freeMemory,\r\n            serverAccessError: false\r\n          });\r\n        })\r\n        .catch(err => {\r\n          console.error(err);\r\n          this.setState({\r\n            maxMemory: 0,\r\n            allocatedMemory: 0,\r\n            freeMemory: 0,\r\n            serverAccessError: true\r\n          });\r\n        });\r\n    };\r\n\r\n    setInterval(getTime, requestInterval);\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.getFreeMemValue() < 20 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  getFreeMemValue() {\r\n    let fm = this.state.freeMemory;\r\n    let am = this.state.allocatedMemory;\r\n\r\n    // console.log(\"free memory: \" + fm);\r\n    // console.log(\"alocated memory: \" + am);\r\n    // console.log(\"max memory: \" + this.state.maxMemory);\r\n\r\n    if (am === 0 || isNaN(am)) return \"--\";\r\n    let result = (100 * fm) / am;\r\n    if (result > 100) result = 100;\r\n    if (result < 0 || isNaN(result)) result = 0;\r\n    return Math.round(result);\r\n  }\r\n\r\n  getBadgeValue() {\r\n    return this.state.serverAccessError ? \"N/A\" : this.getFreeMemValue();\r\n  }\r\n}\r\n\r\nexport default MemIndicator;\r\n","import React, { Component } from \"react\";\r\nimport CpuIndicator from \"./cpuIndicator\";\r\nimport MemoryIndicator from \"./memIndicator\";\r\n\r\nclass IndicatorsContainer extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CpuIndicator />\r\n        <MemoryIndicator />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default IndicatorsContainer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport IndicatorsContainer from \"./components/container\";\n\nReactDOM.render(<IndicatorsContainer />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}